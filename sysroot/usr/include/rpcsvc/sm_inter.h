/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _SM_INTER_H_RPCGEN
#define	_SM_INTER_H_RPCGEN

#include <rpc/rpc.h>
#ifndef _KERNEL
#include <synch.h>
#include <thread.h>
#endif /* !_KERNEL */

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Copyright (c) 1986, 1994 by Sun Microsystems, Inc.
 * All rights reserved.
 */
/* from sm_inter.x */
#define	SM_MAXSTRLEN 1024

struct sm_name {
	char *mon_name;
};
typedef struct sm_name sm_name;

struct my_id {
	char *my_name;
	int my_prog;
	int my_vers;
	int my_proc;
};
typedef struct my_id my_id;

struct mon_id {
	char *mon_name;
	struct my_id my_id;
};
typedef struct mon_id mon_id;

struct mon {
	struct mon_id mon_id;
	char priv[16];
};
typedef struct mon mon;

struct sm_stat {
	int state;
};
typedef struct sm_stat sm_stat;

enum sm_res {
	stat_succ = 0,
	stat_fail = 1
};
typedef enum sm_res sm_res;

struct sm_stat_res {
	sm_res res_stat;
	int state;
};
typedef struct sm_stat_res sm_stat_res;

struct sm_status {
	char *mon_name;
	int state;
	char priv[16];
};
typedef struct sm_status sm_status;

struct stat_chge {
	char *mon_name;
	int state;
};
typedef struct stat_chge stat_chge;

#define	SM_PROG	100024
#define	SM_VERS	1

#if defined(__STDC__) || defined(__cplusplus)
#define	SM_STAT	1
extern  enum clnt_stat sm_stat_1(struct sm_name *, struct sm_stat_res *, CLIENT *);
extern  bool_t sm_stat_1_svc(struct sm_name *, struct sm_stat_res *, struct svc_req *);
#define	SM_MON	2
extern  enum clnt_stat sm_mon_1(struct mon *, struct sm_stat_res *, CLIENT *);
extern  bool_t sm_mon_1_svc(struct mon *, struct sm_stat_res *, struct svc_req *);
#define	SM_UNMON	3
extern  enum clnt_stat sm_unmon_1(struct mon_id *, struct sm_stat *, CLIENT *);
extern  bool_t sm_unmon_1_svc(struct mon_id *, struct sm_stat *, struct svc_req *);
#define	SM_UNMON_ALL	4
extern  enum clnt_stat sm_unmon_all_1(struct my_id *, struct sm_stat *, CLIENT *);
extern  bool_t sm_unmon_all_1_svc(struct my_id *, struct sm_stat *, struct svc_req *);
#define	SM_SIMU_CRASH	5
extern  enum clnt_stat sm_simu_crash_1(void *, void *, CLIENT *);
extern  bool_t sm_simu_crash_1_svc(void *, void *, struct svc_req *);
#define	SM_NOTIFY	6
extern  enum clnt_stat sm_notify_1(struct stat_chge *, void *, CLIENT *);
extern  bool_t sm_notify_1_svc(struct stat_chge *, void *, struct svc_req *);
extern int sm_prog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define	SM_STAT	1
extern  enum clnt_stat sm_stat_1();
extern  bool_t sm_stat_1_svc();
#define	SM_MON	2
extern  enum clnt_stat sm_mon_1();
extern  bool_t sm_mon_1_svc();
#define	SM_UNMON	3
extern  enum clnt_stat sm_unmon_1();
extern  bool_t sm_unmon_1_svc();
#define	SM_UNMON_ALL	4
extern  enum clnt_stat sm_unmon_all_1();
extern  bool_t sm_unmon_all_1_svc();
#define	SM_SIMU_CRASH	5
extern  enum clnt_stat sm_simu_crash_1();
extern  bool_t sm_simu_crash_1_svc();
#define	SM_NOTIFY	6
extern  enum clnt_stat sm_notify_1();
extern  bool_t sm_notify_1_svc();
extern int sm_prog_1_freeresult();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_sm_name(XDR *, sm_name*);
extern  bool_t xdr_my_id(XDR *, my_id*);
extern  bool_t xdr_mon_id(XDR *, mon_id*);
extern  bool_t xdr_mon(XDR *, mon*);
extern  bool_t xdr_sm_stat(XDR *, sm_stat*);
extern  bool_t xdr_sm_res(XDR *, sm_res*);
extern  bool_t xdr_sm_stat_res(XDR *, sm_stat_res*);
extern  bool_t xdr_sm_status(XDR *, sm_status*);
extern  bool_t xdr_stat_chge(XDR *, stat_chge*);

#else /* K&R C */
extern bool_t xdr_sm_name();
extern bool_t xdr_my_id();
extern bool_t xdr_mon_id();
extern bool_t xdr_mon();
extern bool_t xdr_sm_stat();
extern bool_t xdr_sm_res();
extern bool_t xdr_sm_stat_res();
extern bool_t xdr_sm_status();
extern bool_t xdr_stat_chge();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_SM_INTER_H_RPCGEN */
