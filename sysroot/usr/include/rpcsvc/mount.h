/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MOUNT_H_RPCGEN
#define	_MOUNT_H_RPCGEN

#include <rpc/rpc.h>

#ifdef __cplusplus
extern "C" {
#endif

#define	MNTPATHLEN 1024
#define	MNTNAMLEN 255
#define	FHSIZE 32
#define	FHSIZE3 64

typedef char fhandle[FHSIZE];

typedef struct {
	u_int fhandle3_len;
	char *fhandle3_val;
} fhandle3;

struct fhstatus {
	u_int fhs_status;
	union {
		fhandle fhs_fhandle;
	} fhstatus_u;
};
typedef struct fhstatus fhstatus;

#define fhs_fh fhstatus_u.fhs_fhandle

enum mountstat3 {
	MNT_OK = 0,
	MNT3ERR_PERM = 1,
	MNT3ERR_NOENT = 2,
	MNT3ERR_IO = 5,
	MNT3ERR_ACCES = 13,
	MNT3ERR_NOTDIR = 20,
	MNT3ERR_INVAL = 22,
	MNT3ERR_NAMETOOLONG = 63,
	MNT3ERR_NOTSUPP = 10004,
	MNT3ERR_SERVERFAULT = 10006
};
typedef enum mountstat3 mountstat3;

struct mountres3_ok {
	fhandle3 fhandle;
	struct {
		u_int auth_flavors_len;
		int *auth_flavors_val;
	} auth_flavors;
};
typedef struct mountres3_ok mountres3_ok;

struct mountres3 {
	mountstat3 fhs_status;
	union {
		mountres3_ok mountinfo;
	} mountres3_u;
};
typedef struct mountres3 mountres3;

typedef char *dirpath;

typedef char *name;

typedef struct mountbody *mountlist;

struct mountbody {
	name ml_hostname;
	dirpath ml_directory;
	mountlist ml_next;
};
typedef struct mountbody mountbody;

typedef struct groupnode *groups;

struct groupnode {
	name gr_name;
	groups gr_next;
};
typedef struct groupnode groupnode;

typedef struct exportnode *exports;

struct exportnode {
	dirpath ex_dir;
	groups ex_groups;
	exports ex_next;
};
typedef struct exportnode exportnode;

struct ppathcnf {
	int pc_link_max;
	short pc_max_canon;
	short pc_max_input;
	short pc_name_max;
	short pc_path_max;
	short pc_pipe_buf;
	u_char pc_vdisable;
	char pc_xxx;
	short pc_mask[2];
};
typedef struct ppathcnf ppathcnf;

#define	MOUNTPROG	100005
#define	MOUNTVERS	1

#if defined(__STDC__) || defined(__cplusplus)
#define	MOUNTPROC_NULL	0
extern  void * mountproc_null_1(void *, CLIENT *);
extern  void * mountproc_null_1_svc(void *, struct svc_req *);
#define	MOUNTPROC_MNT	1
extern  fhstatus * mountproc_mnt_1(dirpath *, CLIENT *);
extern  fhstatus * mountproc_mnt_1_svc(dirpath *, struct svc_req *);
#define	MOUNTPROC_DUMP	2
extern  mountlist * mountproc_dump_1(void *, CLIENT *);
extern  mountlist * mountproc_dump_1_svc(void *, struct svc_req *);
#define	MOUNTPROC_UMNT	3
extern  void * mountproc_umnt_1(dirpath *, CLIENT *);
extern  void * mountproc_umnt_1_svc(dirpath *, struct svc_req *);
#define	MOUNTPROC_UMNTALL	4
extern  void * mountproc_umntall_1(void *, CLIENT *);
extern  void * mountproc_umntall_1_svc(void *, struct svc_req *);
#define	MOUNTPROC_EXPORT	5
extern  exports * mountproc_export_1(void *, CLIENT *);
extern  exports * mountproc_export_1_svc(void *, struct svc_req *);
#define	MOUNTPROC_EXPORTALL	6
extern  exports * mountproc_exportall_1(void *, CLIENT *);
extern  exports * mountproc_exportall_1_svc(void *, struct svc_req *);
extern int mountprog_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define	MOUNTPROC_NULL	0
extern  void * mountproc_null_1();
extern  void * mountproc_null_1_svc();
#define	MOUNTPROC_MNT	1
extern  fhstatus * mountproc_mnt_1();
extern  fhstatus * mountproc_mnt_1_svc();
#define	MOUNTPROC_DUMP	2
extern  mountlist * mountproc_dump_1();
extern  mountlist * mountproc_dump_1_svc();
#define	MOUNTPROC_UMNT	3
extern  void * mountproc_umnt_1();
extern  void * mountproc_umnt_1_svc();
#define	MOUNTPROC_UMNTALL	4
extern  void * mountproc_umntall_1();
extern  void * mountproc_umntall_1_svc();
#define	MOUNTPROC_EXPORT	5
extern  exports * mountproc_export_1();
extern  exports * mountproc_export_1_svc();
#define	MOUNTPROC_EXPORTALL	6
extern  exports * mountproc_exportall_1();
extern  exports * mountproc_exportall_1_svc();
extern int mountprog_1_freeresult();
#endif /* K&R C */
#define	MOUNTVERS_POSIX	2

#if defined(__STDC__) || defined(__cplusplus)
extern  void * mountproc_null_2(void *, CLIENT *);
extern  void * mountproc_null_2_svc(void *, struct svc_req *);
extern  fhstatus * mountproc_mnt_2(dirpath *, CLIENT *);
extern  fhstatus * mountproc_mnt_2_svc(dirpath *, struct svc_req *);
extern  mountlist * mountproc_dump_2(void *, CLIENT *);
extern  mountlist * mountproc_dump_2_svc(void *, struct svc_req *);
extern  void * mountproc_umnt_2(dirpath *, CLIENT *);
extern  void * mountproc_umnt_2_svc(dirpath *, struct svc_req *);
extern  void * mountproc_umntall_2(void *, CLIENT *);
extern  void * mountproc_umntall_2_svc(void *, struct svc_req *);
extern  exports * mountproc_export_2(void *, CLIENT *);
extern  exports * mountproc_export_2_svc(void *, struct svc_req *);
extern  exports * mountproc_exportall_2(void *, CLIENT *);
extern  exports * mountproc_exportall_2_svc(void *, struct svc_req *);
#define	MOUNTPROC_PATHCONF	7
extern  ppathcnf * mountproc_pathconf_2(dirpath *, CLIENT *);
extern  ppathcnf * mountproc_pathconf_2_svc(dirpath *, struct svc_req *);
extern int mountprog_2_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
extern  void * mountproc_null_2();
extern  void * mountproc_null_2_svc();
extern  fhstatus * mountproc_mnt_2();
extern  fhstatus * mountproc_mnt_2_svc();
extern  mountlist * mountproc_dump_2();
extern  mountlist * mountproc_dump_2_svc();
extern  void * mountproc_umnt_2();
extern  void * mountproc_umnt_2_svc();
extern  void * mountproc_umntall_2();
extern  void * mountproc_umntall_2_svc();
extern  exports * mountproc_export_2();
extern  exports * mountproc_export_2_svc();
extern  exports * mountproc_exportall_2();
extern  exports * mountproc_exportall_2_svc();
#define	MOUNTPROC_PATHCONF	7
extern  ppathcnf * mountproc_pathconf_2();
extern  ppathcnf * mountproc_pathconf_2_svc();
extern int mountprog_2_freeresult();
#endif /* K&R C */
#define	MOUNTVERS3	3

#if defined(__STDC__) || defined(__cplusplus)
extern  void * mountproc_null_3(void *, CLIENT *);
extern  void * mountproc_null_3_svc(void *, struct svc_req *);
extern  mountres3 * mountproc_mnt_3(dirpath *, CLIENT *);
extern  mountres3 * mountproc_mnt_3_svc(dirpath *, struct svc_req *);
extern  mountlist * mountproc_dump_3(void *, CLIENT *);
extern  mountlist * mountproc_dump_3_svc(void *, struct svc_req *);
extern  void * mountproc_umnt_3(dirpath *, CLIENT *);
extern  void * mountproc_umnt_3_svc(dirpath *, struct svc_req *);
extern  void * mountproc_umntall_3(void *, CLIENT *);
extern  void * mountproc_umntall_3_svc(void *, struct svc_req *);
extern  exports * mountproc_export_3(void *, CLIENT *);
extern  exports * mountproc_export_3_svc(void *, struct svc_req *);
extern int mountprog_3_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
extern  void * mountproc_null_3();
extern  void * mountproc_null_3_svc();
extern  mountres3 * mountproc_mnt_3();
extern  mountres3 * mountproc_mnt_3_svc();
extern  mountlist * mountproc_dump_3();
extern  mountlist * mountproc_dump_3_svc();
extern  void * mountproc_umnt_3();
extern  void * mountproc_umnt_3_svc();
extern  void * mountproc_umntall_3();
extern  void * mountproc_umntall_3_svc();
extern  exports * mountproc_export_3();
extern  exports * mountproc_export_3_svc();
extern int mountprog_3_freeresult();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_fhandle(XDR *, fhandle);
extern  bool_t xdr_fhandle3(XDR *, fhandle3*);
extern  bool_t xdr_fhstatus(XDR *, fhstatus*);
extern  bool_t xdr_mountstat3(XDR *, mountstat3*);
extern  bool_t xdr_mountres3_ok(XDR *, mountres3_ok*);
extern  bool_t xdr_mountres3(XDR *, mountres3*);
extern  bool_t xdr_dirpath(XDR *, dirpath*);
extern  bool_t xdr_name(XDR *, name*);
extern  bool_t xdr_mountlist(XDR *, mountlist*);
extern  bool_t xdr_mountbody(XDR *, mountbody*);
extern  bool_t xdr_groups(XDR *, groups*);
extern  bool_t xdr_groupnode(XDR *, groupnode*);
extern  bool_t xdr_exports(XDR *, exports*);
extern  bool_t xdr_exportnode(XDR *, exportnode*);
extern  bool_t xdr_ppathcnf(XDR *, ppathcnf*);

#else /* K&R C */
extern bool_t xdr_fhandle();
extern bool_t xdr_fhandle3();
extern bool_t xdr_fhstatus();
extern bool_t xdr_mountstat3();
extern bool_t xdr_mountres3_ok();
extern bool_t xdr_mountres3();
extern bool_t xdr_dirpath();
extern bool_t xdr_name();
extern bool_t xdr_mountlist();
extern bool_t xdr_mountbody();
extern bool_t xdr_groups();
extern bool_t xdr_groupnode();
extern bool_t xdr_exports();
extern bool_t xdr_exportnode();
extern bool_t xdr_ppathcnf();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_MOUNT_H_RPCGEN */
