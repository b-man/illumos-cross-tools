/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NIS_H_RPCGEN
#define	_NIS_H_RPCGEN

#include <rpc/rpc.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <rpc/xdr.h>

#ifndef __nis_object_h
#define __nis_object_h

#define	NIS_MAXSTRINGLEN 255
#define	NIS_MAXNAMELEN 1024
#define	NIS_MAXATTRNAME 32
#define	NIS_MAXATTRVAL 2048
#define	NIS_MAXCOLUMNS 64
#define	NIS_MAXATTR 16
#define	NIS_MAXPATH 1024
#define	NIS_MAXREPLICAS 128
#define	NIS_MAXLINKS 16
#define	NIS_PK_NONE 0
#define	NIS_PK_DH 1
#define	NIS_PK_RSA 2
#define	NIS_PK_KERB 3
#define	NIS_PK_DHEXT 4

struct nis_attr {
	char *zattr_ndx;
	struct {
		u_int zattr_val_len;
		char *zattr_val_val;
	} zattr_val;
};
typedef struct nis_attr nis_attr;

typedef char *nis_name;

enum zotypes {
	BOGUS_OBJ = 0,
	NO_OBJ = 1,
	DIRECTORY_OBJ = 2,
	GROUP_OBJ = 3,
	TABLE_OBJ = 4,
	ENTRY_OBJ = 5,
	LINK_OBJ = 6,
	PRIVATE_OBJ = 7,
	NIS_BOGUS_OBJ = 0,
	NIS_NO_OBJ = 1,
	NIS_DIRECTORY_OBJ = 2,
	NIS_GROUP_OBJ = 3,
	NIS_TABLE_OBJ = 4,
	NIS_ENTRY_OBJ = 5,
	NIS_LINK_OBJ = 6,
	NIS_PRIVATE_OBJ = 7
};
typedef enum zotypes zotypes;

enum nstype {
	UNKNOWN = 0,
	NIS = 1,
	SUNYP = 2,
	IVY = 3,
	DNS = 4,
	X500 = 5,
	DNANS = 6,
	XCHS = 7,
	CDS = 8
};
typedef enum nstype nstype;

struct oar_mask {
	uint_t oa_rights;
	zotypes oa_otype;
};
typedef struct oar_mask oar_mask;

struct endpoint {
	char *uaddr;
	char *family;
	char *proto;
};
typedef struct endpoint endpoint;

struct nis_server {
	nis_name name;
	struct {
		u_int ep_len;
		endpoint *ep_val;
	} ep;
	uint_t key_type;
	netobj pkey;
};
typedef struct nis_server nis_server;

struct directory_obj {
	nis_name do_name;
	nstype do_type;
	struct {
		u_int do_servers_len;
		nis_server *do_servers_val;
	} do_servers;
	uint32_t do_ttl;
	struct {
		u_int do_armask_len;
		oar_mask *do_armask_val;
	} do_armask;
};
typedef struct directory_obj directory_obj;
#define	EN_BINARY 1
#define	EN_CRYPT 2
#define	EN_XDR 4
#define	EN_MODIFIED 8
#define	EN_ASN1 64

struct entry_col {
	uint_t ec_flags;
	struct {
		u_int ec_value_len;
		char *ec_value_val;
	} ec_value;
};
typedef struct entry_col entry_col;

struct entry_obj {
	char *en_type;
	struct {
		u_int en_cols_len;
		entry_col *en_cols_val;
	} en_cols;
};
typedef struct entry_obj entry_obj;

struct group_obj {
	uint_t gr_flags;
	struct {
		u_int gr_members_len;
		nis_name *gr_members_val;
	} gr_members;
};
typedef struct group_obj group_obj;

struct link_obj {
	zotypes li_rtype;
	struct {
		u_int li_attrs_len;
		nis_attr *li_attrs_val;
	} li_attrs;
	nis_name li_name;
};
typedef struct link_obj link_obj;
#define	TA_BINARY 1
#define	TA_CRYPT 2
#define	TA_XDR 4
#define	TA_SEARCHABLE 8
#define	TA_CASE 16
#define	TA_MODIFIED 32
#define	TA_ASN1 64

struct table_col {
	char *tc_name;
	uint_t tc_flags;
	uint_t tc_rights;
};
typedef struct table_col table_col;

struct table_obj {
	char *ta_type;
	int ta_maxcol;
	u_char ta_sep;
	struct {
		u_int ta_cols_len;
		table_col *ta_cols_val;
	} ta_cols;
	char *ta_path;
};
typedef struct table_obj table_obj;

struct objdata {
	zotypes zo_type;
	union {
		struct directory_obj di_data;
		struct group_obj gr_data;
		struct table_obj ta_data;
		struct entry_obj en_data;
		struct link_obj li_data;
		struct {
			u_int po_data_len;
			char *po_data_val;
		} po_data;
	} objdata_u;
};
typedef struct objdata objdata;

struct nis_oid {
	uint32_t ctime;
	uint32_t mtime;
};
typedef struct nis_oid nis_oid;

struct nis_object {
	nis_oid zo_oid;
	nis_name zo_name;
	nis_name zo_owner;
	nis_name zo_group;
	nis_name zo_domain;
	uint_t zo_access;
	uint32_t zo_ttl;
	objdata zo_data;
};
typedef struct nis_object nis_object;

#endif /* if __nis_object_h */


enum log_entry_t {
	LOG_NOP = 0,
	ADD_NAME = 1,
	REM_NAME = 2,
	MOD_NAME_OLD = 3,
	MOD_NAME_NEW = 4,
	ADD_IBASE = 5,
	REM_IBASE = 6,
	MOD_IBASE = 7,
	UPD_STAMP = 8
};
typedef enum log_entry_t log_entry_t;

struct log_entry {
	uint32_t le_time;
	log_entry_t le_type;
	nis_name le_princp;
	nis_name le_name;
	struct {
		u_int le_attrs_len;
		nis_attr *le_attrs_val;
	} le_attrs;
	nis_object le_object;
};
typedef struct log_entry log_entry;

struct nis_tag {
	u_int tag_type;
	char *tag_val;
};
typedef struct nis_tag nis_tag;
/*
 * Structures used for server binding.
 */

struct nis_bound_endpoint {
	endpoint ep;
	int generation;
	int rank;
	u_int flags;
	int hostnum;
	int epnum;
	nis_name uaddr;
	endpoint cbep;
};
typedef struct nis_bound_endpoint nis_bound_endpoint;


struct nis_bound_directory {
	int generation;
	int min_rank;
	int optimal_rank;
	directory_obj dobj;
	struct {
		u_int BEP_len;
		nis_bound_endpoint *BEP_val;
	} BEP;
};
typedef struct nis_bound_directory nis_bound_directory;

#define bep_len BEP.BEP_len
#define bep_val BEP.BEP_val

struct nis_active_endpoint {
	endpoint ep;
	nis_name hostname;
	int rank;
	int uaddr_generation;
	nis_name uaddr;
	int cbep_generation;
	endpoint cbep;
};
typedef struct nis_active_endpoint nis_active_endpoint;

/* defines for nis_bound_endpoint.flags */
#define NIS_BOUND 0x1
#define NIS_TRANSIENT_ERRORS 0x2
/*
 * Generic "hash" datastructures, used by all types of hashed data.
 */
struct nis_hash_data {
 nis_name name; /* NIS name of hashed item      */
 int keychain; /* It's hash key (for pop)      */
 struct nis_hash_data *next; /* Hash collision pointer       */
 struct nis_hash_data *prv_item; /* A serial, doubly linked list */
 struct nis_hash_data *nxt_item; /* of items in the hash table   */
};
typedef struct nis_hash_data NIS_HASH_ITEM;

struct nis_hash_table {
 NIS_HASH_ITEM *keys[64]; /* A hash table of items           */
 NIS_HASH_ITEM *first; /* The first "item" in serial list */
};
typedef struct nis_hash_table NIS_HASH_TABLE;

/* Structure for storing dynamically allocated static data */
struct nis_sdata {
 void *buf; /* Memory allocation pointer 	*/
 u_int size; /* Buffer size			*/
};

/* Generic client creating flags */
#define ZMH_VC 1
#define ZMH_DG 2
#define ZMH_AUTH 4
#define ZMH_NOFALLBACK 8

/* Testing Access rights for objects */

#define NIS_READ_ACC 1
#define NIS_MODIFY_ACC 2
#define NIS_CREATE_ACC 4
#define NIS_DESTROY_ACC 8
/* Test macros. a == access rights, m == desired rights. */
#define NIS_WORLD(a, m) (((a) & (m)) != 0)
#define NIS_GROUP(a, m) (((a) & ((m) << 8)) != 0)
#define NIS_OWNER(a, m) (((a) & ((m) << 16)) != 0)
#define NIS_NOBODY(a, m) (((a) & ((m) << 24)) != 0)
/* 
 * EOL Alert - The following non-prefixed test macros are 
 * here for backward compatability, and will be not be present
 * in future releases - use the NIS_*() macros above.
 */
#define WORLD(a, m) (((a) & (m)) != 0)
#define GROUP(a, m) (((a) & ((m) << 8)) != 0)
#define OWNER(a, m) (((a) & ((m) << 16)) != 0)
#define NOBODY(a, m) (((a) & ((m) << 24)) != 0)

#define OATYPE(d, n) (((d)->do_armask.do_armask_val+n)->oa_otype)
#define OARIGHTS(d, n) (((d)->do_armask.do_armask_val+n)->oa_rights)
#define WORLD_DEFAULT (NIS_READ_ACC)
#define GROUP_DEFAULT (NIS_READ_ACC << 8)
#define OWNER_DEFAULT ((NIS_READ_ACC + NIS_MODIFY_ACC + NIS_CREATE_ACC + NIS_DESTROY_ACC) << 16)
#define DEFAULT_RIGHTS (WORLD_DEFAULT | GROUP_DEFAULT | OWNER_DEFAULT)

/* Result manipulation defines ... */
#define NIS_RES_NUMOBJ(x) ((x)->objects.objects_len)
#define NIS_RES_OBJECT(x) ((x)->objects.objects_val)
#define NIS_RES_COOKIE(x) ((x)->cookie)
#define NIS_RES_STATUS(x) ((x)->status)

/* These defines make getting at the variant part of the object easier. */
#define TA_data zo_data.objdata_u.ta_data
#define EN_data zo_data.objdata_u.en_data
#define DI_data zo_data.objdata_u.di_data
#define LI_data zo_data.objdata_u.li_data
#define GR_data zo_data.objdata_u.gr_data

#define __type_of(o) ((o)->zo_data.zo_type)

/* Declarations for the internal subroutines in nislib.c */
enum name_pos {SAME_NAME, HIGHER_NAME, LOWER_NAME, NOT_SEQUENTIAL, BAD_NAME};
typedef enum name_pos name_pos;

/*
 * Defines for getting at column data in entry objects. Because RPCGEN
 * generates some rather wordy structures, we create some defines that
 * collapse the needed keystrokes to access a particular value using
 * these definitions they take an nis_object *, and an int and return
 * a u_char * for Value, and an int for length.
 */
#define ENTRY_VAL(obj, col) (obj)->EN_data.en_cols.en_cols_val[col].ec_value.ec_value_val
#define ENTRY_LEN(obj, col) (obj)->EN_data.en_cols.en_cols_val[col].ec_value.ec_value_len



#ifdef __cplusplus
}
#endif

/* Prototypes, and extern declarations for the NIS library functions. */
#include <rpcsvc/nislib.h>
#endif /* __NIS_RPCGEN_H */
