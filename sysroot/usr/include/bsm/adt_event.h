/*
 * DO NOT EDIT. This file is auto generated by the Solaris Audit
 * system from adt.xml.
 *
 * See http://opensolaris.org/os/project/audit/
 */

#ifndef _ADT_EVENT_H
#define	_ADT_EVENT_H

#include <bsm/adt.h>

#ifdef	__cplusplus
extern "C" {
#endif

/*
 * adt_put_event() status values.  Positive values are for kernel-generated
 * failure, -1 for user-space.  For ADT_SUCCESS, the adt_put_event() return_val
 * is not used; the convention is to set it to ADT_SUCCESS.
 */
#define	ADT_SUCCESS	0
#define	ADT_FAILURE	-1

#define	ADT_FAIL_PAM	2000
#define	ADT_FAIL_VALUE	1000
enum	adt_fail_value {
	ADT_FAIL_VALUE_PW_ATTR = 1000,	/* Attribute update */
	ADT_FAIL_VALUE_PW,		/* Password update */
	ADT_FAIL_VALUE_USERNAME,		/* bad username */
	ADT_FAIL_VALUE_AUTH,		/* authorization failed */
	ADT_FAIL_VALUE_UID,		/* bad uid */
	ADT_FAIL_VALUE_UNKNOWN,		/* unknown failure */
	ADT_FAIL_VALUE_EXPIRED,		/* password expired */
	ADT_FAIL_VALUE_ACCOUNT_LOCKED,		/* Account is locked */
	ADT_FAIL_VALUE_BAD_DIALUP,		/* Bad dial up */
	ADT_FAIL_VALUE_BAD_ID,		/* Invalid ID */
	ADT_FAIL_VALUE_BAD_PW,		/* Invalid password */
	ADT_FAIL_VALUE_CONSOLE,		/* Not on console */
	ADT_FAIL_VALUE_MAX_TRIES,		/* Too many failed attempts */
	ADT_FAIL_VALUE_PROTOCOL_FAILURE,		/* Protocol failure */
	ADT_FAIL_VALUE_EXCLUDED_USER,		/* Excluded user */
	ADT_FAIL_VALUE_ANON_USER,		/* No anonymous */
	ADT_FAIL_VALUE_BAD_CMD,		/* Invalid command */
	ADT_FAIL_VALUE_BAD_TTY,		/* Standard input not a tty line */
	ADT_FAIL_VALUE_PROGRAM,		/* Program failure */
	ADT_FAIL_VALUE_CHDIR_FAILED,		/* chdir to home directory */
	ADT_FAIL_VALUE_INPUT_OVERFLOW,		/* Input line too long. */
	ADT_FAIL_VALUE_DEVICE_PERM,		/* login device override */
	ADT_FAIL_VALUE_AUTH_BYPASS,		/* authorization bypass */
	ADT_FAIL_VALUE_LOGIN_DISABLED		/* login disabled */
};
/* Deprecated message list */
enum	adt_login_text {
	ADT_LOGIN_NO_MSG,		/* (no token will be generated) */
	ADT_LOGIN_ACCOUNT_LOCKED,		/* Account is locked */
	ADT_LOGIN_BAD_DIALUP,		/* Bad dial up */
	ADT_LOGIN_BAD_ID,		/* Invalid ID */
	ADT_LOGIN_BAD_PW,		/* Invalid password */
	ADT_LOGIN_CONSOLE,		/* Not on console */
	ADT_LOGIN_MAX_TRIES,		/* Too many failed attempts */
	ADT_LOGIN_PROTOCOL_FAILURE,		/* Protocol failure */
	ADT_LOGIN_EXCLUDED_USER,		/* Excluded user */
	ADT_LOGIN_ANON_USER		/* No anonymous */
};
#define	ADT_TPM_E	4000
enum	adt_tpm_e {
	ADT_TPM_E_AUTHFAIL = 4000,	/* Authentication failed */
	ADT_TPM_E_BADINDEX,	/* The index to a PCR, DIR or other ... */
	ADT_TPM_E_BAD_PARAMETER,	/* One or more parameter is bad */
	ADT_TPM_E_AUDITFAILURE,		/* auditing of the operation failed. */
	ADT_TPM_E_CLEAR_DISABLED,	/* clear operations now physical ... */
	ADT_TPM_E_DEACTIVATED,		/* The TPM is deactivated */
	ADT_TPM_E_DISABLED,		/* The TPM is disabled */
	ADT_TPM_E_DISABLED_CMD,	/* The target command has been disabled */
	ADT_TPM_E_FAIL,		/* The operation failed */
	ADT_TPM_E_BAD_ORDINAL,	/* The ordinal was unknown or inconsistent */
	ADT_TPM_E_INSTALL_DISABLED,	/* The ability to install an ... */
	ADT_TPM_E_INVALID_KEYHANDLE,	/* The key handle can not be ... */
	ADT_TPM_E_KEYNOTFOUND,	/* The key handle points to an invalid key */
	ADT_TPM_E_INAPPROPRIATE_ENC,	/* Unacceptable encryption scheme */
	ADT_TPM_E_MIGRATEFAIL,		/* Migration authorization failed */
	ADT_TPM_E_INVALID_PCR_INFO,	/* PCR information could not be ... */
	ADT_TPM_E_NOSPACE,		/* No room to load key. */
	ADT_TPM_E_NOSRK,		/* There is no SRK set */
	ADT_TPM_E_NOTSEALED_BLOB,	/* An encrypted blob is invalid ... */
	ADT_TPM_E_OWNER_SET,		/* There is already an Owner */
	ADT_TPM_E_RESOURCES,	/* The TPM has insufficient internal ... */
	ADT_TPM_E_SHORTRANDOM,		/* A random string was too short */
	ADT_TPM_E_SIZE,	/* The TPM does not have the space to perform the ... */
	ADT_TPM_E_WRONGPCRVAL,	/* The named PCR value does not match the ... */
	ADT_TPM_E_BAD_PARAM_SIZE,	/* The paramSize argument has the ... */
	ADT_TPM_E_SHA_THREAD,		/* There is no existing SHA-1 thread. */
	ADT_TPM_E_SHA_ERROR,		/* SHA-1 thread encountered an error. */
	ADT_TPM_E_FAILEDSELFTEST,	/* Self-test has failed and the ... */
	ADT_TPM_E_AUTH2FAIL,	/* The auth for the second key failed ... */
	ADT_TPM_E_BADTAG,	/* The tag value sent to for a command is ... */
	ADT_TPM_E_IOERROR,	/* An IO error occurred transmitting ... */
	ADT_TPM_E_ENCRYPT_ERROR,	/* The encryption process had a ... */
	ADT_TPM_E_DECRYPT_ERROR,	/* The decryption process did not ... */
	ADT_TPM_E_INVALID_AUTHHANDLE,	/* An invalid handle was used. */
	ADT_TPM_E_NO_ENDORSEMENT,	/* The TPM does not a EK installed */
	ADT_TPM_E_INVALID_KEYUSAGE,	/* The usage of a key is not allowed */
	ADT_TPM_E_WRONG_ENTITYTYPE,	/* The submitted entity type is ... */
	ADT_TPM_E_INVALID_POSTINIT,	/* The command was received in ... */
	ADT_TPM_E_INAPPROPRIATE_SIG,	/* Signed data cannot include ... */
	ADT_TPM_E_BAD_KEY_PROPERTY,	/* The key properties are not ... */
	ADT_TPM_E_BAD_MIGRATION,	/* The migration properties of ... */
	ADT_TPM_E_BAD_SCHEME,	/* Incorrect signature or encryption scheme */
	ADT_TPM_E_BAD_DATASIZE,	/* The size of the data parameter is bad */
	ADT_TPM_E_BAD_MODE,		/* A mode parameter is bad */
	ADT_TPM_E_BAD_PRESENCE,	/* physicalPresence or ... */
	ADT_TPM_E_BAD_VERSION,	/* The TPM cannot perform this version of ... */
	ADT_TPM_E_NO_WRAP_TRANSPORT,	/* The TPM does not allow for ... */
	ADT_TPM_E_AUDITFAIL_UNSUCCESSFUL,	/* TPM audit construction ... */
	ADT_TPM_E_AUDITFAIL_SUCCESSFUL,	/* TPM audit construction failed ... */
	ADT_TPM_E_NOTRESETABLE,	/* PCR register does not have the ... */
	ADT_TPM_E_NOTLOCAL,		/* PCR register requires locality */
	ADT_TPM_E_BAD_TYPE,	/* Make identity blob not properly typed */
	ADT_TPM_E_INVALID_RESOURCE,	/* Resource type does not match ... */
	ADT_TPM_E_NOTFIPS,	/* Command only available when TPM is in ... */
	ADT_TPM_E_INVALID_FAMILY,	/* The command is attempting to ... */
	ADT_TPM_E_NO_NV_PERMISSION,	/* The permission to manipulate ... */
	ADT_TPM_E_REQUIRES_SIGN,	/* The operation requires a ... */
	ADT_TPM_E_KEY_NOTSUPPORTED,	/* Wrong operation to load an NV key */
	ADT_TPM_E_AUTH_CONFLICT,	/* NV_LoadKey blob requires both ... */
	ADT_TPM_E_AREA_LOCKED,	/* The NV area is locked and not writable */
	ADT_TPM_E_BAD_LOCALITY,	/* The locality is incorrect for the ... */
	ADT_TPM_E_READ_ONLY,	/* The NV area is read only and can't be ... */
	ADT_TPM_E_PER_NOWRITE,	/* There is no protection on the write to ... */
	ADT_TPM_E_FAMILYCOUNT,	/* The family count value does not match */
	ADT_TPM_E_WRITE_LOCKED,	/* The NV area has already been written to */
	ADT_TPM_E_BAD_ATTRIBUTES,	/* The NV area attributes conflict */
	ADT_TPM_E_INVALID_STRUCTURE,	/* The tag and version are ... */
	ADT_TPM_E_KEY_OWNER_CONTROL,	/* The key evicted by the TPM Owner. */
	ADT_TPM_E_BAD_COUNTER,		/* The counter handle is incorrect */
	ADT_TPM_E_NOT_FULLWRITE,	/* The write is not a complete ... */
	ADT_TPM_E_CONTEXT_GAP,	/* The gap between saved context counts ... */
	ADT_TPM_E_MAXNVWRITES,	/* Max number of NV writes without owner ... */
	ADT_TPM_E_NOOPERATOR,		/* No operator AuthData value is set */
	ADT_TPM_E_RESOURCEMISSING,	/* The resource pointed to by ... */
	ADT_TPM_E_DELEGATE_LOCK,	/* The delegate administration is ... */
	ADT_TPM_E_DELEGATE_FAMILY,	/* Attempt to manage a family ... */
	ADT_TPM_E_DELEGATE_ADMIN,	/* Delegation table management ... */
	ADT_TPM_E_TRANSPORT_NOTEXCLUSIVE,	/* Command executed ... */
	ADT_TPM_E_OWNER_CONTROL,	/* Attempt to context save a ... */
	ADT_TPM_E_DAA_RESOURCES,	/* DAA command has no resources ... */
	ADT_TPM_E_DAA_INPUT_DATA0,	/* The consistency check on DAA ... */
	ADT_TPM_E_DAA_INPUT_DATA1,	/* The consistency check on DAA ... */
	ADT_TPM_E_DAA_ISSUER_SETTINGS,	/* The consistency check on ... */
	ADT_TPM_E_DAA_TPM_SETTINGS,	/* The consistency check on ... */
	ADT_TPM_E_DAA_STAGE,	/* Atomic process indicated by DAA ... */
	ADT_TPM_E_DAA_ISSUER_VALIDITY,	/* Inconsistent issuer validity */
	ADT_TPM_E_DAA_WRONG_W,	/* The consistency check on w has failed. */
	ADT_TPM_E_BAD_HANDLE,		/* The handle is incorrect */
	ADT_TPM_E_BAD_DELEGATE,		/* Delegation is not correct */
	ADT_TPM_E_BADCONTEXT,		/* The context blob is invalid */
	ADT_TPM_E_TOOMANYCONTEXTS,	/* Too many contexts held by the TPM */
	ADT_TPM_E_MA_TICKET_SIGNATURE,	/* Migration authority signature ... */
	ADT_TPM_E_MA_DESTINATION,	/* Migration destination not ... */
	ADT_TPM_E_MA_SOURCE,		/* Migration source incorrect */
	ADT_TPM_E_MA_AUTHORITY,		/* Incorrect migration authority */
	ADT_TPM_E_PERMANENTEK,	/* Attempt to revoke the EK and the EK is ... */
	ADT_TPM_E_BAD_SIGNATURE,	/* Bad signature of CMK ticket */
	ADT_TPM_E_NOCONTEXTSPACE,	/* There is no room in the ... */
	ADT_TPM_E_RETRY,	/* The TPM is too busy to respond to the ... */
	ADT_TPM_E_NEEDS_SELFTEST,	/* SelfTestFull has not been run */
	ADT_TPM_E_DOING_SELFTEST,	/* The TPM is currently executing ... */
	ADT_TPM_E_DEFEND_LOCK_RUNNING,	/* TPM is defending against ... */
	ADT_TPM_E_NO_MSG		/* (no token will be generated) */
};
#define	ADT_UADMIN_FCN	3000
enum	adt_uadmin_fcn {
	ADT_UADMIN_FCN_AD_HALT = 3000,	/* Halt the processor(s) */
	ADT_UADMIN_FCN_AD_POWEROFF,	/* Halt the processor(s) and turn ... */
	ADT_UADMIN_FCN_AD_BOOT,	/* Reboot the system using the kernel file */
	ADT_UADMIN_FCN_AD_IBOOT,		/* Interactive reboot */
	ADT_UADMIN_FCN_AD_SUSPEND_TO_DISK,	/* Save the system state ... */
	ADT_UADMIN_FCN_AD_CHECK_SUSPEND_TO_DISK,	/* Check if ... */
	ADT_UADMIN_FCN_AD_FORCE,	/* Force suspend to disk even ... */
	ADT_UADMIN_FCN_AD_SUSPEND_TO_RAM,	/* Save the system state ... */
	ADT_UADMIN_FCN_AD_CHECK_SUSPEND_TO_RAM,	/* Check if system ... */
	ADT_UADMIN_FCN_AD_SBOOT,		/* Single-user reboot */
	ADT_UADMIN_FCN_AD_SIBOOT,	/* Single-user interactive reboot */
	ADT_UADMIN_FCN_AD_NOSYNC,	/* Do not sync filesystems on ... */
	ADT_UADMIN_FCN_AD_FASTREBOOT,	/* Reboot bypassing BIOS and boot ... */
	ADT_UADMIN_FCN_AD_FASTREBOOT_DRYRUN,	/* Check if system ... */
	ADT_UADMIN_FCN_AD_UPDATE_BOOT_CONFIG,	/* Update boot ... */
	ADT_UADMIN_FCN_AD_REUSEINIT,		/* Prepare for AD_REUSABLE */
	ADT_UADMIN_FCN_AD_REUSABLE,		/* Create reusable statefile */
	ADT_UADMIN_FCN_AD_REUSEFINI,	/* Revert to normal CPR mode (not ... */
	ADT_UADMIN_FCN_AD_FTRACE_START,		/* ftrace start */
	ADT_UADMIN_FCN_AD_FTRACE_STOP		/* ftrace stop */
};
#define	ADT_admin_authenticate	3
#define	ADT_attach		42
#define	ADT_cpu_ondemand	93
#define	ADT_cpu_performance	94
#define	ADT_cpu_threshold	95
#define	ADT_detach		43
#define	ADT_dladm_create_secobj	47
#define	ADT_dladm_delete_secobj	48
#define	ADT_file_copy		50
#define	ADT_file_relabel	49
#define	ADT_filesystem_add	4
#define	ADT_filesystem_delete	5
#define	ADT_filesystem_modify	6
#define	ADT_hotplug_set		118
#define	ADT_hotplug_state	117
#define	ADT_ilb_add_server	126
#define	ADT_ilb_create_healthcheck	120
#define	ADT_ilb_create_rule	122
#define	ADT_ilb_create_servergroup	130
#define	ADT_ilb_delete_healthcheck	121
#define	ADT_ilb_delete_rule	123
#define	ADT_ilb_delete_servergroup	131
#define	ADT_ilb_disable_rule	124
#define	ADT_ilb_disable_server	127
#define	ADT_ilb_enable_rule	125
#define	ADT_ilb_enable_server	128
#define	ADT_ilb_remove_server	129
#define	ADT_inetd_connect	34
#define	ADT_inetd_copylimit	36
#define	ADT_inetd_failrate	37
#define	ADT_inetd_ratelimit	35
#define	ADT_init_solaris	32
#define	ADT_login		25
#define	ADT_logout		1
#define	ADT_ndmp_backup		63
#define	ADT_ndmp_connect	61
#define	ADT_ndmp_disconnect	62
#define	ADT_ndmp_restore	64
#define	ADT_netcfg_remove	135
#define	ADT_netcfg_update	134
#define	ADT_network_add		7
#define	ADT_network_delete	8
#define	ADT_network_modify	9
#define	ADT_newgrp_login	41
#define	ADT_nwam_disable	133
#define	ADT_nwam_enable		132
#define	ADT_passwd		27
#define	ADT_pool_export		46
#define	ADT_pool_import		45
#define	ADT_printer_add		10
#define	ADT_printer_delete	11
#define	ADT_printer_modify	12
#define	ADT_prof_cmd		24
#define	ADT_remove		44
#define	ADT_rlogin		28
#define	ADT_role_login		13
#define	ADT_role_logout		40
#define	ADT_scheduledjob_add	14
#define	ADT_scheduledjob_delete	15
#define	ADT_scheduledjob_modify	16
#define	ADT_screenlock		26
#define	ADT_screenunlock	31
#define	ADT_serialport_add	17
#define	ADT_serialport_delete	18
#define	ADT_serialport_modify	19
#define	ADT_smbd_logoff		59
#define	ADT_smbd_session	58
#define	ADT_smf_annotation	88
#define	ADT_smf_attach_snap	87
#define	ADT_smf_change_prop	90
#define	ADT_smf_clear		71
#define	ADT_smf_create		79
#define	ADT_smf_create_npg	82
#define	ADT_smf_create_pg	81
#define	ADT_smf_create_prop	89
#define	ADT_smf_create_snap	85
#define	ADT_smf_degrade		72
#define	ADT_smf_delete		80
#define	ADT_smf_delete_npg	84
#define	ADT_smf_delete_pg	83
#define	ADT_smf_delete_prop	91
#define	ADT_smf_delete_snap	86
#define	ADT_smf_disable		67
#define	ADT_smf_enable		65
#define	ADT_smf_immediate_degrade	73
#define	ADT_smf_immediate_maintenance	75
#define	ADT_smf_immtmp_maintenance	76
#define	ADT_smf_maintenance	74
#define	ADT_smf_milestone	78
#define	ADT_smf_read_prop	92
#define	ADT_smf_refresh		70
#define	ADT_smf_restart		69
#define	ADT_smf_tmp_disable	68
#define	ADT_smf_tmp_enable	66
#define	ADT_smf_tmp_maintenance	77
#define	ADT_ssh			2
#define	ADT_su			30
#define	ADT_su_logout		39
#define	ADT_telnet		29
#define	ADT_tpm_certifyselftest	103
#define	ADT_tpm_continueselftest	104
#define	ADT_tpm_disableforceclear	109
#define	ADT_tpm_disableownerclear	107
#define	ADT_tpm_fieldupgrade	115
#define	ADT_tpm_forceclear	108
#define	ADT_tpm_ownerclear	106
#define	ADT_tpm_ownersetdisable	105
#define	ADT_tpm_physicaldeactivate	112
#define	ADT_tpm_physicaldisable	110
#define	ADT_tpm_physicalenable	111
#define	ADT_tpm_physicalpresence	114
#define	ADT_tpm_resetlockvalue	116
#define	ADT_tpm_selftestfull	102
#define	ADT_tpm_setoperatorauth	100
#define	ADT_tpm_setownerinstall	101
#define	ADT_tpm_settempdeactivated	113
#define	ADT_tpm_takeownership	99
#define	ADT_uadmin_config	119
#define	ADT_uadmin_dump		53
#define	ADT_uadmin_freeze	54
#define	ADT_uadmin_ftrace	56
#define	ADT_uadmin_reboot	52
#define	ADT_uadmin_remount	55
#define	ADT_uadmin_shutdown	51
#define	ADT_uadmin_swapctl	57
#define	ADT_uadmin_thaw		96
#define	ADT_uauth		20
#define	ADT_usermgr_add		21
#define	ADT_usermgr_delete	22
#define	ADT_usermgr_modify	23
#define	ADT_vscan_quarantine	60
#define	ADT_zlogin		38
#define	ADT_zone_state		33

struct adt_admin_authenticate {	/* ADT_admin_authenticate */
	enum adt_login_text	message;	/*  optional  */
};
typedef struct adt_admin_authenticate adt_admin_authenticate_t;

struct adt_attach {	/* ADT_attach */
	char 	*auth_used;	/* required */
	char 	*mount_point;	/* required */
	char 	*device;	/* required */
	char 	*options;	/* optional */
};
typedef struct adt_attach adt_attach_t;

struct adt_cpu_ondemand {	/* ADT_cpu_ondemand */
	char 	*auth_used;	/* required */
};
typedef struct adt_cpu_ondemand adt_cpu_ondemand_t;

struct adt_cpu_performance {	/* ADT_cpu_performance */
	char 	*auth_used;	/* required */
};
typedef struct adt_cpu_performance adt_cpu_performance_t;

struct adt_cpu_threshold {	/* ADT_cpu_threshold */
	char 	*auth_used;	/* required */
	int	threshold;	/* required */
};
typedef struct adt_cpu_threshold adt_cpu_threshold_t;

struct adt_detach {	/* ADT_detach */
	char 	*auth_used;	/* required */
	char 	*mount_point;	/* required */
	char 	*device;	/* required */
	char 	*options;	/* optional */
};
typedef struct adt_detach adt_detach_t;

struct adt_dladm_create_secobj {	/* ADT_dladm_create_secobj */
	char 	*auth_used;	/* required */
	char 	*obj_class;	/* required */
	char 	*obj_name;	/* required */
};
typedef struct adt_dladm_create_secobj adt_dladm_create_secobj_t;

struct adt_dladm_delete_secobj {	/* ADT_dladm_delete_secobj */
	char 	*auth_used;	/* required */
	char 	*obj_class;	/* required */
	char 	*obj_name;	/* required */
};
typedef struct adt_dladm_delete_secobj adt_dladm_delete_secobj_t;

struct adt_file_copy {	/* ADT_file_copy */
	char 	*auth_used;	/* required */
	char 	*src_file;	/* required */
	m_label_t 	*src_label;	/* required */
	char 	*dst_file;	/* required */
	m_label_t 	*dst_label;	/* required */
};
typedef struct adt_file_copy adt_file_copy_t;

struct adt_file_relabel {	/* ADT_file_relabel */
	char 	*auth_used;	/* required */
	char 	*file;	/* required */
	m_label_t 	*src_label;	/* required */
	m_label_t 	*dst_label;	/* required */
};
typedef struct adt_file_relabel adt_file_relabel_t;

struct adt_filesystem_add {	/* ADT_filesystem_add */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*initial_values;	/* required */
};
typedef struct adt_filesystem_add adt_filesystem_add_t;

struct adt_filesystem_delete {	/* ADT_filesystem_delete */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*delete_values;	/* required */
};
typedef struct adt_filesystem_delete adt_filesystem_delete_t;

struct adt_filesystem_modify {	/* ADT_filesystem_modify */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*changed_values;	/* required */
};
typedef struct adt_filesystem_modify adt_filesystem_modify_t;

struct adt_hotplug_set {	/* ADT_hotplug_set */
	char 	*auth_used;	/* required */
	char 	*device_path;	/* required */
	char 	*connection;	/* required */
	char 	*options;	/* required */
};
typedef struct adt_hotplug_set adt_hotplug_set_t;

struct adt_hotplug_state {	/* ADT_hotplug_state */
	char 	*auth_used;	/* required */
	char 	*device_path;	/* required */
	char 	*connection;	/* required */
	char 	*new_state;	/* required */
	char 	*old_state;	/* required */
};
typedef struct adt_hotplug_state adt_hotplug_state_t;

struct adt_ilb_add_server {	/* ADT_ilb_add_server */
	char 	*auth_used;	/* required */
	int32_t	server_ipaddress_type;	/*  required  */
	uint32_t	server_ipaddress[4];	/*  required  */
	char 	*server_id;	/* optional */
	char 	*server_group;	/* required */
	uint16_t	server_minport;	/* optional */
	uint16_t	server_maxport;	/* optional */
};
typedef struct adt_ilb_add_server adt_ilb_add_server_t;

struct adt_ilb_create_healthcheck {	/* ADT_ilb_create_healthcheck */
	char 	*auth_used;	/* required */
	char 	*hc_test;	/* required */
	char 	*hc_name;	/* required */
	int32_t	hc_timeout;	/* required */
	int	hc_count;	/* required */
	int32_t	hc_interval;	/* required */
};
typedef struct adt_ilb_create_healthcheck adt_ilb_create_healthcheck_t;

struct adt_ilb_create_rule {	/* ADT_ilb_create_rule */
	char 	*auth_used;	/* required */
	int32_t	virtual_ipaddress_type;	/*  required  */
	uint32_t	virtual_ipaddress[4];	/*  required  */
	uint16_t	min_port;	/* required */
	uint16_t	max_port;	/* required */
	char 	*protocol;	/* required */
	char 	*algo_optype;	/* required */
	int32_t	proxy_src_min_type;	/*  optional  */
	uint32_t	proxy_src_min[4];	/*  optional  */
	int32_t	proxy_src_max_type;	/*  optional  */
	uint32_t	proxy_src_max[4];	/*  optional  */
	char 	*persist_mask;	/* required */
	char 	*hcname;	/* optional */
	char 	*hcport;	/* optional */
	uint32_t	conndrain_timeout;	/* required */
	uint32_t	nat_timeout;	/* required */
	uint32_t	persist_timeout;	/* required */
	char 	*server_group;	/* required */
	char 	*rule_name;	/* required */
};
typedef struct adt_ilb_create_rule adt_ilb_create_rule_t;

struct adt_ilb_create_servergroup {	/* ADT_ilb_create_servergroup */
	char 	*auth_used;	/* required */
	char 	*server_group;	/* required */
};
typedef struct adt_ilb_create_servergroup adt_ilb_create_servergroup_t;

struct adt_ilb_delete_healthcheck {	/* ADT_ilb_delete_healthcheck */
	char 	*auth_used;	/* required */
	char 	*hc_name;	/* required */
};
typedef struct adt_ilb_delete_healthcheck adt_ilb_delete_healthcheck_t;

struct adt_ilb_delete_rule {	/* ADT_ilb_delete_rule */
	char 	*auth_used;	/* required */
	char 	*rule_name;	/* required */
};
typedef struct adt_ilb_delete_rule adt_ilb_delete_rule_t;

struct adt_ilb_delete_servergroup {	/* ADT_ilb_delete_servergroup */
	char 	*auth_used;	/* required */
	char 	*server_group;	/* required */
};
typedef struct adt_ilb_delete_servergroup adt_ilb_delete_servergroup_t;

struct adt_ilb_disable_rule {	/* ADT_ilb_disable_rule */
	char 	*auth_used;	/* required */
	char 	*rule_name;	/* required */
};
typedef struct adt_ilb_disable_rule adt_ilb_disable_rule_t;

struct adt_ilb_disable_server {	/* ADT_ilb_disable_server */
	char 	*auth_used;	/* required */
	char 	*server_id;	/* required */
	int32_t	server_ipaddress_type;	/*  optional  */
	uint32_t	server_ipaddress[4];	/*  optional  */
};
typedef struct adt_ilb_disable_server adt_ilb_disable_server_t;

struct adt_ilb_enable_rule {	/* ADT_ilb_enable_rule */
	char 	*auth_used;	/* required */
	char 	*rule_name;	/* required */
};
typedef struct adt_ilb_enable_rule adt_ilb_enable_rule_t;

struct adt_ilb_enable_server {	/* ADT_ilb_enable_server */
	char 	*auth_used;	/* required */
	char 	*server_id;	/* required */
	int32_t	server_ipaddress_type;	/*  optional  */
	uint32_t	server_ipaddress[4];	/*  optional  */
};
typedef struct adt_ilb_enable_server adt_ilb_enable_server_t;

struct adt_ilb_remove_server {	/* ADT_ilb_remove_server */
	char 	*auth_used;	/* required */
	char 	*server_id;	/* required */
	char 	*server_group;	/* required */
	int32_t	server_ipaddress_type;	/*  optional  */
	uint32_t	server_ipaddress[4];	/*  optional  */
};
typedef struct adt_ilb_remove_server adt_ilb_remove_server_t;

struct adt_inetd_connect {	/* ADT_inetd_connect */
	char 	*service_name;	/* optional */
	uint32_t	ip_type;	/*  required  */
	uint16_t	ip_remote_port;	/*  required  */
	uint16_t	ip_local_port;	/*  required  */
	uint32_t	ip_adr[4];	/*  required  */
	char 	*cmd;	/* required */
	priv_set_t 	*privileges;	/* required */
};
typedef struct adt_inetd_connect adt_inetd_connect_t;

struct adt_inetd_copylimit {	/* ADT_inetd_copylimit */
	char 	*service_name;	/* optional */
	char 	*limit;	/* required */
};
typedef struct adt_inetd_copylimit adt_inetd_copylimit_t;

struct adt_inetd_failrate {	/* ADT_inetd_failrate */
	char 	*service_name;	/* optional */
	char 	*values;	/* required */
};
typedef struct adt_inetd_failrate adt_inetd_failrate_t;

struct adt_inetd_ratelimit {	/* ADT_inetd_ratelimit */
	char 	*service_name;	/* optional */
	char 	*limit;	/* required */
};
typedef struct adt_inetd_ratelimit adt_inetd_ratelimit_t;

struct adt_init_solaris {	/* ADT_init_solaris */
	char 	*info;	/* optional */
};
typedef struct adt_init_solaris adt_init_solaris_t;

struct adt_login {	/* ADT_login */
	enum adt_login_text	message;	/*  optional  */
};
typedef struct adt_login adt_login_t;

struct adt_logout {	/* ADT_logout */
	char 	*user_name;	/* optional (format: logout %s) */
};
typedef struct adt_logout adt_logout_t;

struct adt_ndmp_backup {	/* ADT_ndmp_backup */
	char 	*source;	/* required */
	char 	*local_dest;	/* optional */
	fd_t	remote_dest;	/* optional */
};
typedef struct adt_ndmp_backup adt_ndmp_backup_t;

struct adt_ndmp_connect {	/* ADT_ndmp_connect */
	int	dummy;	/* not used */
};
typedef struct adt_ndmp_connect adt_ndmp_connect_t;

struct adt_ndmp_disconnect {	/* ADT_ndmp_disconnect */
	int	dummy;	/* not used */
};
typedef struct adt_ndmp_disconnect adt_ndmp_disconnect_t;

struct adt_ndmp_restore {	/* ADT_ndmp_restore */
	char 	*destination;	/* required */
	char 	*local_source;	/* optional */
	fd_t	remote_source;	/* optional */
};
typedef struct adt_ndmp_restore adt_ndmp_restore_t;

struct adt_netcfg_remove {	/* ADT_netcfg_remove */
	char 	*parent_file;	/* required */
	char 	*object_name;	/* required */
};
typedef struct adt_netcfg_remove adt_netcfg_remove_t;

struct adt_netcfg_update {	/* ADT_netcfg_update */
	char 	*parent_file;	/* required */
	char 	*object_name;	/* required */
};
typedef struct adt_netcfg_update adt_netcfg_update_t;

struct adt_network_add {	/* ADT_network_add */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*initial_values;	/* required */
};
typedef struct adt_network_add adt_network_add_t;

struct adt_network_delete {	/* ADT_network_delete */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*delete_values;	/* required */
};
typedef struct adt_network_delete adt_network_delete_t;

struct adt_network_modify {	/* ADT_network_modify */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*changed_values;	/* required */
};
typedef struct adt_network_modify adt_network_modify_t;

struct adt_newgrp_login {	/* ADT_newgrp_login */
	char 	*groupname;	/* required */
};
typedef struct adt_newgrp_login adt_newgrp_login_t;

struct adt_nwam_disable {	/* ADT_nwam_disable */
	char 	*profile_type;	/* required */
	char 	*profile_name;	/* required */
};
typedef struct adt_nwam_disable adt_nwam_disable_t;

struct adt_nwam_enable {	/* ADT_nwam_enable */
	char 	*profile_type;	/* required */
	char 	*profile_name;	/* required */
};
typedef struct adt_nwam_enable adt_nwam_enable_t;

struct adt_passwd {	/* ADT_passwd */
	uid_t	uid;	/*  optional  */
	char 	*username;	/*  optional  */
};
typedef struct adt_passwd adt_passwd_t;

struct adt_pool_export {	/* ADT_pool_export */
	char 	*auth_used;	/* required */
	char 	*pool;	/* required */
	char 	*device;	/* required */
};
typedef struct adt_pool_export adt_pool_export_t;

struct adt_pool_import {	/* ADT_pool_import */
	char 	*auth_used;	/* required */
	char 	*pool;	/* required */
	char 	*device;	/* required */
};
typedef struct adt_pool_import adt_pool_import_t;

struct adt_printer_add {	/* ADT_printer_add */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*initial_values;	/* required */
};
typedef struct adt_printer_add adt_printer_add_t;

struct adt_printer_delete {	/* ADT_printer_delete */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*delete_values;	/* required */
};
typedef struct adt_printer_delete adt_printer_delete_t;

struct adt_printer_modify {	/* ADT_printer_modify */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*changed_values;	/* required */
};
typedef struct adt_printer_modify adt_printer_modify_t;

struct adt_prof_cmd {	/* ADT_prof_cmd */
	char	*cwdpath;	/* required */
	char	*cmdpath;	/* required */
	int	argc;	/*  required  */
	char	**argv;	/*  required  */
	char	**envp;	/*  required  */
	uid_t	proc_auid;	/*  required  */
	uid_t	proc_euid;	/*  required  */
	gid_t	proc_egid;	/*  required  */
	uid_t	proc_ruid;	/*  required  */
	gid_t	proc_rgid;	/*  required  */
	pid_t	proc_pid;	/*  required  */
	au_asid_t	proc_sid;	/*  required  */
	adt_termid_t	*proc_termid;	/*  required  */
	priv_set_t	*limit_set;	/* optional */
	priv_set_t	*inherit_set;	/* optional */
};
typedef struct adt_prof_cmd adt_prof_cmd_t;

struct adt_remove {	/* ADT_remove */
	char 	*auth_used;	/* required */
	char 	*mount_point;	/* optional */
	char 	*device;	/* required */
};
typedef struct adt_remove adt_remove_t;

struct adt_rlogin {	/* ADT_rlogin */
	enum adt_login_text	message;	/*  optional  */
};
typedef struct adt_rlogin adt_rlogin_t;

struct adt_role_login {	/* ADT_role_login */
	enum adt_login_text	message;	/*  optional  */
};
typedef struct adt_role_login adt_role_login_t;

struct adt_role_logout {	/* ADT_role_logout */
	int	dummy;	/* not used */
};
typedef struct adt_role_logout adt_role_logout_t;

struct adt_scheduledjob_add {	/* ADT_scheduledjob_add */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*initial_values;	/* required */
};
typedef struct adt_scheduledjob_add adt_scheduledjob_add_t;

struct adt_scheduledjob_delete {	/* ADT_scheduledjob_delete */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*delete_values;	/* required */
};
typedef struct adt_scheduledjob_delete adt_scheduledjob_delete_t;

struct adt_scheduledjob_modify {	/* ADT_scheduledjob_modify */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*changed_values;	/* required */
};
typedef struct adt_scheduledjob_modify adt_scheduledjob_modify_t;

struct adt_screenlock {	/* ADT_screenlock */
	int	dummy;	/* not used */
};
typedef struct adt_screenlock adt_screenlock_t;

struct adt_screenunlock {	/* ADT_screenunlock */
	int	dummy;	/* not used */
};
typedef struct adt_screenunlock adt_screenunlock_t;

struct adt_serialport_add {	/* ADT_serialport_add */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*initial_values;	/* required */
};
typedef struct adt_serialport_add adt_serialport_add_t;

struct adt_serialport_delete {	/* ADT_serialport_delete */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*delete_values;	/* required */
};
typedef struct adt_serialport_delete adt_serialport_delete_t;

struct adt_serialport_modify {	/* ADT_serialport_modify */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*changed_values;	/* required */
};
typedef struct adt_serialport_modify adt_serialport_modify_t;

struct adt_smbd_logoff {	/* ADT_smbd_logoff */
	char	*domain;	/* required */
	char	*username;	/* required */
};
typedef struct adt_smbd_logoff adt_smbd_logoff_t;

struct adt_smbd_session {	/* ADT_smbd_session */
	char	*domain;	/* required */
	char	*username;	/* required */
	char	*sid;	/* optional */
};
typedef struct adt_smbd_session adt_smbd_session_t;

struct adt_smf_annotation {	/* ADT_smf_annotation */
	char 	*operation;	/* required */
	char 	*file;	/* required */
};
typedef struct adt_smf_annotation adt_smf_annotation_t;

struct adt_smf_attach_snap {	/* ADT_smf_attach_snap */
	char 	*auth_used;	/* required */
	char 	*old_fmri;	/* required */
	char 	*old_name;	/* required */
	char 	*new_fmri;	/* required */
	char 	*new_name;	/* required */
};
typedef struct adt_smf_attach_snap adt_smf_attach_snap_t;

struct adt_smf_change_prop {	/* ADT_smf_change_prop */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
	char 	*type;	/* required */
	char 	*value;	/* optional */
};
typedef struct adt_smf_change_prop adt_smf_change_prop_t;

struct adt_smf_clear {	/* ADT_smf_clear */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_clear adt_smf_clear_t;

struct adt_smf_create {	/* ADT_smf_create */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_create adt_smf_create_t;

struct adt_smf_create_npg {	/* ADT_smf_create_npg */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
	char 	*type;	/* required */
};
typedef struct adt_smf_create_npg adt_smf_create_npg_t;

struct adt_smf_create_pg {	/* ADT_smf_create_pg */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
	char 	*type;	/* required */
};
typedef struct adt_smf_create_pg adt_smf_create_pg_t;

struct adt_smf_create_prop {	/* ADT_smf_create_prop */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
	char 	*type;	/* required */
	char 	*value;	/* optional */
};
typedef struct adt_smf_create_prop adt_smf_create_prop_t;

struct adt_smf_create_snap {	/* ADT_smf_create_snap */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
	char 	*name;	/* required */
};
typedef struct adt_smf_create_snap adt_smf_create_snap_t;

struct adt_smf_degrade {	/* ADT_smf_degrade */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_degrade adt_smf_degrade_t;

struct adt_smf_delete {	/* ADT_smf_delete */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_delete adt_smf_delete_t;

struct adt_smf_delete_npg {	/* ADT_smf_delete_npg */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
	char 	*type;	/* required */
};
typedef struct adt_smf_delete_npg adt_smf_delete_npg_t;

struct adt_smf_delete_pg {	/* ADT_smf_delete_pg */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
	char 	*type;	/* required */
};
typedef struct adt_smf_delete_pg adt_smf_delete_pg_t;

struct adt_smf_delete_prop {	/* ADT_smf_delete_prop */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_delete_prop adt_smf_delete_prop_t;

struct adt_smf_delete_snap {	/* ADT_smf_delete_snap */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
	char 	*name;	/* required */
};
typedef struct adt_smf_delete_snap adt_smf_delete_snap_t;

struct adt_smf_disable {	/* ADT_smf_disable */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_disable adt_smf_disable_t;

struct adt_smf_enable {	/* ADT_smf_enable */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_enable adt_smf_enable_t;

struct adt_smf_immediate_degrade {	/* ADT_smf_immediate_degrade */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_immediate_degrade adt_smf_immediate_degrade_t;

struct adt_smf_immediate_maintenance {	/* ADT_smf_immediate_maintenance */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_immediate_maintenance adt_smf_immediate_maintenance_t;

struct adt_smf_immtmp_maintenance {	/* ADT_smf_immtmp_maintenance */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_immtmp_maintenance adt_smf_immtmp_maintenance_t;

struct adt_smf_maintenance {	/* ADT_smf_maintenance */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_maintenance adt_smf_maintenance_t;

struct adt_smf_milestone {	/* ADT_smf_milestone */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_milestone adt_smf_milestone_t;

struct adt_smf_read_prop {	/* ADT_smf_read_prop */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_read_prop adt_smf_read_prop_t;

struct adt_smf_refresh {	/* ADT_smf_refresh */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_refresh adt_smf_refresh_t;

struct adt_smf_restart {	/* ADT_smf_restart */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_restart adt_smf_restart_t;

struct adt_smf_tmp_disable {	/* ADT_smf_tmp_disable */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_tmp_disable adt_smf_tmp_disable_t;

struct adt_smf_tmp_enable {	/* ADT_smf_tmp_enable */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_tmp_enable adt_smf_tmp_enable_t;

struct adt_smf_tmp_maintenance {	/* ADT_smf_tmp_maintenance */
	char 	*auth_used;	/* required */
	char 	*fmri;	/* required */
};
typedef struct adt_smf_tmp_maintenance adt_smf_tmp_maintenance_t;

struct adt_ssh {	/* ADT_ssh */
	enum adt_login_text	message;	/*  optional  */
};
typedef struct adt_ssh adt_ssh_t;

struct adt_su {	/* ADT_su */
	char 	*message;	/* optional */
};
typedef struct adt_su adt_su_t;

struct adt_su_logout {	/* ADT_su_logout */
	int	dummy;	/* not used */
};
typedef struct adt_su_logout adt_su_logout_t;

struct adt_telnet {	/* ADT_telnet */
	enum adt_login_text	message;	/*  optional  */
};
typedef struct adt_telnet adt_telnet_t;

struct adt_tpm_certifyselftest {	/* ADT_tpm_certifyselftest */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_certifyselftest adt_tpm_certifyselftest_t;

struct adt_tpm_continueselftest {	/* ADT_tpm_continueselftest */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_continueselftest adt_tpm_continueselftest_t;

struct adt_tpm_disableforceclear {	/* ADT_tpm_disableforceclear */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_disableforceclear adt_tpm_disableforceclear_t;

struct adt_tpm_disableownerclear {	/* ADT_tpm_disableownerclear */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_disableownerclear adt_tpm_disableownerclear_t;

struct adt_tpm_fieldupgrade {	/* ADT_tpm_fieldupgrade */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_fieldupgrade adt_tpm_fieldupgrade_t;

struct adt_tpm_forceclear {	/* ADT_tpm_forceclear */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_forceclear adt_tpm_forceclear_t;

struct adt_tpm_ownerclear {	/* ADT_tpm_ownerclear */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_ownerclear adt_tpm_ownerclear_t;

struct adt_tpm_ownersetdisable {	/* ADT_tpm_ownersetdisable */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_ownersetdisable adt_tpm_ownersetdisable_t;

struct adt_tpm_physicaldeactivate {	/* ADT_tpm_physicaldeactivate */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_physicaldeactivate adt_tpm_physicaldeactivate_t;

struct adt_tpm_physicaldisable {	/* ADT_tpm_physicaldisable */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_physicaldisable adt_tpm_physicaldisable_t;

struct adt_tpm_physicalenable {	/* ADT_tpm_physicalenable */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_physicalenable adt_tpm_physicalenable_t;

struct adt_tpm_physicalpresence {	/* ADT_tpm_physicalpresence */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_physicalpresence adt_tpm_physicalpresence_t;

struct adt_tpm_resetlockvalue {	/* ADT_tpm_resetlockvalue */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_resetlockvalue adt_tpm_resetlockvalue_t;

struct adt_tpm_selftestfull {	/* ADT_tpm_selftestfull */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_selftestfull adt_tpm_selftestfull_t;

struct adt_tpm_setoperatorauth {	/* ADT_tpm_setoperatorauth */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_setoperatorauth adt_tpm_setoperatorauth_t;

struct adt_tpm_setownerinstall {	/* ADT_tpm_setownerinstall */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_setownerinstall adt_tpm_setownerinstall_t;

struct adt_tpm_settempdeactivated {	/* ADT_tpm_settempdeactivated */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_settempdeactivated adt_tpm_settempdeactivated_t;

struct adt_tpm_takeownership {	/* ADT_tpm_takeownership */
	enum adt_tpm_e	message;	/*  optional  */
};
typedef struct adt_tpm_takeownership adt_tpm_takeownership_t;

struct adt_uadmin_config {	/* ADT_uadmin_config */
	enum adt_uadmin_fcn	fcn;	/*  required  */
	char 	*mdep;	/* optional */
};
typedef struct adt_uadmin_config adt_uadmin_config_t;

struct adt_uadmin_dump {	/* ADT_uadmin_dump */
	enum adt_uadmin_fcn	fcn;	/*  required  */
	char 	*mdep;	/* optional */
};
typedef struct adt_uadmin_dump adt_uadmin_dump_t;

struct adt_uadmin_freeze {	/* ADT_uadmin_freeze */
	enum adt_uadmin_fcn	fcn;	/*  required  */
	char 	*mdep;	/* optional */
};
typedef struct adt_uadmin_freeze adt_uadmin_freeze_t;

struct adt_uadmin_ftrace {	/* ADT_uadmin_ftrace */
	enum adt_uadmin_fcn	fcn;	/*  required  */
	char 	*mdep;	/* optional */
};
typedef struct adt_uadmin_ftrace adt_uadmin_ftrace_t;

struct adt_uadmin_reboot {	/* ADT_uadmin_reboot */
	enum adt_uadmin_fcn	fcn;	/*  required  */
	char 	*mdep;	/* optional */
};
typedef struct adt_uadmin_reboot adt_uadmin_reboot_t;

struct adt_uadmin_remount {	/* ADT_uadmin_remount */
	int	dummy;	/* not used */
};
typedef struct adt_uadmin_remount adt_uadmin_remount_t;

struct adt_uadmin_shutdown {	/* ADT_uadmin_shutdown */
	enum adt_uadmin_fcn	fcn;	/*  required  */
	char 	*mdep;	/* optional */
};
typedef struct adt_uadmin_shutdown adt_uadmin_shutdown_t;

struct adt_uadmin_swapctl {	/* ADT_uadmin_swapctl */
	enum adt_uadmin_fcn	fcn;	/*  required  */
};
typedef struct adt_uadmin_swapctl adt_uadmin_swapctl_t;

struct adt_uadmin_thaw {	/* ADT_uadmin_thaw */
	enum adt_uadmin_fcn	fcn;	/*  required  */
};
typedef struct adt_uadmin_thaw adt_uadmin_thaw_t;

struct adt_uauth {	/* ADT_uauth */
	char 	*auth_used;	/* required */
	char 	*objectname;	/* required */
};
typedef struct adt_uauth adt_uauth_t;

struct adt_usermgr_add {	/* ADT_usermgr_add */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*initial_values;	/* required */
};
typedef struct adt_usermgr_add adt_usermgr_add_t;

struct adt_usermgr_delete {	/* ADT_usermgr_delete */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*delete_values;	/* required */
};
typedef struct adt_usermgr_delete adt_usermgr_delete_t;

struct adt_usermgr_modify {	/* ADT_usermgr_modify */
	char 	*object_name;	/* required */
	char 	*domain;	/* optional */
	char 	*name_service;	/* required */
	char 	*auth_used;	/* optional */
	char 	*changed_values;	/* required */
};
typedef struct adt_usermgr_modify adt_usermgr_modify_t;

struct adt_vscan_quarantine {	/* ADT_vscan_quarantine */
	char	*file;	/* required */
	char	**violations;	/*  optional  */
	int	nviolations;	/*  optional  */
};
typedef struct adt_vscan_quarantine adt_vscan_quarantine_t;

struct adt_zlogin {	/* ADT_zlogin */
	char 	*message;	/* optional */
};
typedef struct adt_zlogin adt_zlogin_t;

struct adt_zone_state {	/* ADT_zone_state */
	char 	*new_state;	/* required */
	char 	*zonename;	/* required */
};
typedef struct adt_zone_state adt_zone_state_t;

union adt_event_data {
		adt_admin_authenticate_t	adt_admin_authenticate;
		adt_attach_t	adt_attach;
		adt_cpu_ondemand_t	adt_cpu_ondemand;
		adt_cpu_performance_t	adt_cpu_performance;
		adt_cpu_threshold_t	adt_cpu_threshold;
		adt_detach_t	adt_detach;
		adt_dladm_create_secobj_t	adt_dladm_create_secobj;
		adt_dladm_delete_secobj_t	adt_dladm_delete_secobj;
		adt_file_copy_t	adt_file_copy;
		adt_file_relabel_t	adt_file_relabel;
		adt_filesystem_add_t	adt_filesystem_add;
		adt_filesystem_delete_t	adt_filesystem_delete;
		adt_filesystem_modify_t	adt_filesystem_modify;
		adt_hotplug_set_t	adt_hotplug_set;
		adt_hotplug_state_t	adt_hotplug_state;
		adt_ilb_add_server_t	adt_ilb_add_server;
		adt_ilb_create_healthcheck_t	adt_ilb_create_healthcheck;
		adt_ilb_create_rule_t	adt_ilb_create_rule;
		adt_ilb_create_servergroup_t	adt_ilb_create_servergroup;
		adt_ilb_delete_healthcheck_t	adt_ilb_delete_healthcheck;
		adt_ilb_delete_rule_t	adt_ilb_delete_rule;
		adt_ilb_delete_servergroup_t	adt_ilb_delete_servergroup;
		adt_ilb_disable_rule_t	adt_ilb_disable_rule;
		adt_ilb_disable_server_t	adt_ilb_disable_server;
		adt_ilb_enable_rule_t	adt_ilb_enable_rule;
		adt_ilb_enable_server_t	adt_ilb_enable_server;
		adt_ilb_remove_server_t	adt_ilb_remove_server;
		adt_inetd_connect_t	adt_inetd_connect;
		adt_inetd_copylimit_t	adt_inetd_copylimit;
		adt_inetd_failrate_t	adt_inetd_failrate;
		adt_inetd_ratelimit_t	adt_inetd_ratelimit;
		adt_init_solaris_t	adt_init_solaris;
		adt_login_t	adt_login;
		adt_logout_t	adt_logout;
		adt_ndmp_backup_t	adt_ndmp_backup;
		adt_ndmp_connect_t	adt_ndmp_connect;
		adt_ndmp_disconnect_t	adt_ndmp_disconnect;
		adt_ndmp_restore_t	adt_ndmp_restore;
		adt_netcfg_remove_t	adt_netcfg_remove;
		adt_netcfg_update_t	adt_netcfg_update;
		adt_network_add_t	adt_network_add;
		adt_network_delete_t	adt_network_delete;
		adt_network_modify_t	adt_network_modify;
		adt_newgrp_login_t	adt_newgrp_login;
		adt_nwam_disable_t	adt_nwam_disable;
		adt_nwam_enable_t	adt_nwam_enable;
		adt_passwd_t	adt_passwd;
		adt_pool_export_t	adt_pool_export;
		adt_pool_import_t	adt_pool_import;
		adt_printer_add_t	adt_printer_add;
		adt_printer_delete_t	adt_printer_delete;
		adt_printer_modify_t	adt_printer_modify;
		adt_prof_cmd_t	adt_prof_cmd;
		adt_remove_t	adt_remove;
		adt_rlogin_t	adt_rlogin;
		adt_role_login_t	adt_role_login;
		adt_role_logout_t	adt_role_logout;
		adt_scheduledjob_add_t	adt_scheduledjob_add;
		adt_scheduledjob_delete_t	adt_scheduledjob_delete;
		adt_scheduledjob_modify_t	adt_scheduledjob_modify;
		adt_screenlock_t	adt_screenlock;
		adt_screenunlock_t	adt_screenunlock;
		adt_serialport_add_t	adt_serialport_add;
		adt_serialport_delete_t	adt_serialport_delete;
		adt_serialport_modify_t	adt_serialport_modify;
		adt_smbd_logoff_t	adt_smbd_logoff;
		adt_smbd_session_t	adt_smbd_session;
		adt_smf_annotation_t	adt_smf_annotation;
		adt_smf_attach_snap_t	adt_smf_attach_snap;
		adt_smf_change_prop_t	adt_smf_change_prop;
		adt_smf_clear_t	adt_smf_clear;
		adt_smf_create_t	adt_smf_create;
		adt_smf_create_npg_t	adt_smf_create_npg;
		adt_smf_create_pg_t	adt_smf_create_pg;
		adt_smf_create_prop_t	adt_smf_create_prop;
		adt_smf_create_snap_t	adt_smf_create_snap;
		adt_smf_degrade_t	adt_smf_degrade;
		adt_smf_delete_t	adt_smf_delete;
		adt_smf_delete_npg_t	adt_smf_delete_npg;
		adt_smf_delete_pg_t	adt_smf_delete_pg;
		adt_smf_delete_prop_t	adt_smf_delete_prop;
		adt_smf_delete_snap_t	adt_smf_delete_snap;
		adt_smf_disable_t	adt_smf_disable;
		adt_smf_enable_t	adt_smf_enable;
		adt_smf_immediate_degrade_t	adt_smf_immediate_degrade;
		adt_smf_immediate_maintenance_t	adt_smf_immediate_maintenance;
		adt_smf_immtmp_maintenance_t	adt_smf_immtmp_maintenance;
		adt_smf_maintenance_t	adt_smf_maintenance;
		adt_smf_milestone_t	adt_smf_milestone;
		adt_smf_read_prop_t	adt_smf_read_prop;
		adt_smf_refresh_t	adt_smf_refresh;
		adt_smf_restart_t	adt_smf_restart;
		adt_smf_tmp_disable_t	adt_smf_tmp_disable;
		adt_smf_tmp_enable_t	adt_smf_tmp_enable;
		adt_smf_tmp_maintenance_t	adt_smf_tmp_maintenance;
		adt_ssh_t	adt_ssh;
		adt_su_t	adt_su;
		adt_su_logout_t	adt_su_logout;
		adt_telnet_t	adt_telnet;
		adt_tpm_certifyselftest_t	adt_tpm_certifyselftest;
		adt_tpm_continueselftest_t	adt_tpm_continueselftest;
		adt_tpm_disableforceclear_t	adt_tpm_disableforceclear;
		adt_tpm_disableownerclear_t	adt_tpm_disableownerclear;
		adt_tpm_fieldupgrade_t	adt_tpm_fieldupgrade;
		adt_tpm_forceclear_t	adt_tpm_forceclear;
		adt_tpm_ownerclear_t	adt_tpm_ownerclear;
		adt_tpm_ownersetdisable_t	adt_tpm_ownersetdisable;
		adt_tpm_physicaldeactivate_t	adt_tpm_physicaldeactivate;
		adt_tpm_physicaldisable_t	adt_tpm_physicaldisable;
		adt_tpm_physicalenable_t	adt_tpm_physicalenable;
		adt_tpm_physicalpresence_t	adt_tpm_physicalpresence;
		adt_tpm_resetlockvalue_t	adt_tpm_resetlockvalue;
		adt_tpm_selftestfull_t	adt_tpm_selftestfull;
		adt_tpm_setoperatorauth_t	adt_tpm_setoperatorauth;
		adt_tpm_setownerinstall_t	adt_tpm_setownerinstall;
		adt_tpm_settempdeactivated_t	adt_tpm_settempdeactivated;
		adt_tpm_takeownership_t	adt_tpm_takeownership;
		adt_uadmin_config_t	adt_uadmin_config;
		adt_uadmin_dump_t	adt_uadmin_dump;
		adt_uadmin_freeze_t	adt_uadmin_freeze;
		adt_uadmin_ftrace_t	adt_uadmin_ftrace;
		adt_uadmin_reboot_t	adt_uadmin_reboot;
		adt_uadmin_remount_t	adt_uadmin_remount;
		adt_uadmin_shutdown_t	adt_uadmin_shutdown;
		adt_uadmin_swapctl_t	adt_uadmin_swapctl;
		adt_uadmin_thaw_t	adt_uadmin_thaw;
		adt_uauth_t	adt_uauth;
		adt_usermgr_add_t	adt_usermgr_add;
		adt_usermgr_delete_t	adt_usermgr_delete;
		adt_usermgr_modify_t	adt_usermgr_modify;
		adt_vscan_quarantine_t	adt_vscan_quarantine;
		adt_zlogin_t	adt_zlogin;
		adt_zone_state_t	adt_zone_state;
};


#ifndef	ADT_PRIVATE
#define	ADT_PRIVATE

/*
 * These interfaces are project private and will change without
 * notice as needed for the Solaris Audit project.
 */

extern	void	adt_get_auid(const adt_session_data_t *, au_id_t *);
extern	void	adt_set_auid(const adt_session_data_t *, const au_id_t);

extern	void	adt_get_mask(const adt_session_data_t *, au_mask_t *);
extern	void	adt_set_mask(const adt_session_data_t *, const au_mask_t *);

extern	void	adt_get_termid(const adt_session_data_t *, au_tid_addr_t *);
extern	void	adt_set_termid(const adt_session_data_t *,
    const au_tid_addr_t *);

extern	void	adt_get_asid(const adt_session_data_t *, au_asid_t *);
extern	void	adt_set_asid(const adt_session_data_t *, const au_asid_t);
extern	au_asid_t adt_get_unique_id(au_id_t);
extern	void	adt_load_table(const adt_session_data_t *, adt_translation_t **,
    void (*preload)(au_event_t, adt_event_data_t *));

extern	void	adt_preload(au_event_t, adt_event_data_t *);

extern adt_translation_t *adt_xlate_table[];

#endif

#ifdef	__cplusplus
}
#endif

#endif	/* _ADT_EVENT_H */
